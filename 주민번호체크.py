import re

def check_resident_number(number):
    # 주민등록번호 패턴 정의
    # ^ : 문자열의 시작을 의미합니다.
    # \d{2} : 숫자 2자리를 의미합니다 (연도)
    # (0[1-9]|1[0-2]) : '01'부터 '12'까지의 월을 의미합니다.
    # (0[1-9]|[12][0-9]|3[01]) : '01'부터 '31'까지의 일을 의미합니다.
    # - : 하이픈을 의미합니다.
    # \d{7} : 숫자 7자리를 의미합니다 (나머지 번호)
    # $ : 문자열의 끝을 의미합니다.
    pattern = r'^\d{2}(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])-\d{7}$'
    
    # 패턴과 주민등록번호 매칭
    match = re.search(pattern, number)
    
    # 매칭 결과 반환 (True 또는 False)
    return bool(match)

# 샘플 데이터
resident_numbers = [
    "900101-1234567",  # 유효한 주민등록번호
    "850505-7654321",  # 유효한 주민등록번호
    "001231-2345678",  # 유효한 주민등록번호
    "120101-3456789",  # 유효한 주민등록번호
    "830202-4567890",  # 유효한 주민등록번호
    "991231-5678901",  # 유효한 주민등록번호
    "020229-6789012",  # 유효한 주민등록번호 (윤년 고려)
    "951230-7890123",  # 유효한 주민등록번호
    "770405-8901234",  # 유효한 주민등록번호
    "880101-9012345",  # 유효한 주민등록번호
    "990230-1234567",  # 유효하지 않은 주민등록번호 (잘못된 날짜)
    "123456-7890123",  # 유효하지 않은 주민등록번호 (잘못된 월과 일)
    "850505-765432",   # 유효하지 않은 주민등록번호 (숫자 7자리가 아님)
    "8505057654321",   # 유효하지 않은 주민등록번호 (하이픈 없음)
]

# 주민등록번호 체크
for number in resident_numbers:
    result = check_resident_number(number)
    print(f"Resident Number: {number}, Valid: {result}")
